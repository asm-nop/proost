# This file expects two variables: `NIX_CI_CACHE_PUB_KEY` and `NIX_CI_CACHE_PRIV_KEY`
# Those variables can be generated with: `nix-store --generate-binary-cache-key ci_nix_store priv.pem pub.pem`

stages: [ nix-cache, lint, tests, coverage, docs ]

variables:
  DEPENDENCIES: ".#proost.inputDerivation nixpkgs#jq nixpkgs#rsync"
  NIX_STORE_CACHE_PATH: ".ci_nix_cache"

default:
  image: nixos/nix:2.22.0
  interruptible: true

  before_script:
   - echo "experimental-features = nix-command flakes" >> /etc/nix/nix.conf
   - echo "substituters = file://$(pwd)/${NIX_STORE_CACHE_PATH} https://cache.nixos.org" >> /etc/nix/nix.conf
   - echo "trusted-public-keys = ${NIX_CI_CACHE_PUB_KEY} cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=" >> /etc/nix/nix.conf

   # Since the cache is not guaranteed to be available, it is preferable to build the dependencies for each job (which is no-op if the cache is available)
   - nix build --print-build-logs ${DEPENDENCIES}

  cache: &nix_cache
    key:
      files: [ flake.lock, flake.nix ]
    paths: [ "${NIX_STORE_CACHE_PATH}" ]
    policy: pull


.build_to_cache:
  cache:
    <<: *nix_cache
    policy: pull-push

  script:
   - nix build --print-build-logs ${NIX_DERIVATION}
   - nix store sign --key-file <(echo "${NIX_CI_CACHE_PRIV_KEY}") --recursive ${NIX_DERIVATION}
   - nix copy --to "file://$(pwd)/${NIX_STORE_CACHE_PATH}" ${NIX_DERIVATION}

.push_zamok:
  script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - \[ -d ${ZAMOK_SOURCE} \] &&
            nix run nixpkgs#rsync -- -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" -rqz ${ZAMOK_SOURCE}/. v-lafeychine@zamok.crans.org:www/proost/${ZAMOK_TARGET} || true


nix-cache:
  stage: nix-cache
  variables:
    NIX_DERIVATION: ${DEPENDENCIES}
  extends: .build_to_cache

clippy:
  stage: lint
  script:
   - nix build --print-build-logs --offline .#checks.x86_64-linux.clippy

deny:
  stage: lint
  script:
   - nix build --print-build-logs .#checks.x86_64-linux.deny

fmt:
  stage: lint
  script:
   - nix build --print-build-logs --offline .#checks.x86_64-linux.fmt

tests:
  stage: tests
  script:
   - nix build --print-build-logs --offline .#proost

coverage:
  stage: coverage
  variables:
    ZAMOK_SOURCE: result/html
    ZAMOK_TARGET: coverage/${CI_COMMIT_REF_SLUG}

  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml

  coverage: '/^Lines: \d+.\d+/'

  script:
   - nix build --print-build-logs .#checks.x86_64-linux.coverage
   - nix run nixpkgs#jq -- -r ".data[0].totals.lines.percent" result/coverage.json | xargs echo "Lines:"
   - cp result/cobertura.xml .
   - !reference [ .push_zamok, script ]

docs:
  stage: docs
  variables:
    ZAMOK_SOURCE: result/doc
    ZAMOK_TARGET: doc

  only:
    refs: [ main ]

  script:
   - nix build --print-build-logs --offline .#doc
   - !reference [ .push_zamok, script ]
